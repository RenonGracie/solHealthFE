name: Deployment
concurrency:
  group: deployment-${{ inputs.environment }}
  cancel-in-progress: true
on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - 'dev'
          - 'stg'
          - 'prod'
  push:
    tags:
      - 'v*'
    branches:
      - 'release/v*'
env:
  AWS_REGION: ${{ vars.AWS_REGION }}
permissions:
  id-token: write
  contents: read
jobs:
  ci:
    name: Run CI Checks
    uses: ./.github/workflows/ci.yml

  setup:
    name: Setup environment
    needs: ci
    runs-on: ubuntu-latest
    outputs:
      deploy_env: ${{ steps.set-env.outputs.deploy_env }}
    steps:
      - name: Check branch for manual prod deployment
        if: ${{ inputs.environment == 'prod' }}
        run: |
          if [[ "${{ github.ref }}" != "refs/heads/main" ]]; then
            echo "❌ Production deployment is only allowed from main branch"
            exit 1
          fi

      - name: Set deploy environment
        id: set-env
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "deploy_env=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "deploy_env=prod" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/heads/release/v* ]]; then
            echo "deploy_env=stg" >> $GITHUB_OUTPUT
          else
            echo "deploy_env=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          fi

  deploy:
    name: Build & Upload Web Application
    runs-on: ubuntu-latest
    needs: setup
    environment: ${{ needs.setup.outputs.deploy_env }}
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '22.14.0'
          cache: 'yarn'
          cache-dependency-path: 'yarn.lock'

      - name: Ensure tag points to main (only for prod)
        if: ${{ needs.setup.outputs.deploy_env == 'prod' && startsWith(github.ref, 'refs/tags/') }}
        id: check_tag
        run: |
          git fetch origin main --depth=1
          COMMIT=$(git rev-parse HEAD)
          MAIN_COMMIT=$(git rev-parse origin/main)

          if [ "$COMMIT" = "$MAIN_COMMIT" ]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          else
            echo "🛑 Tag does not point to main — skipping prod deployment."
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          fi

      - name: Install Dependencies
        if: ${{ needs.setup.outputs.deploy_env != 'prod' || steps.check_tag.outputs.should_deploy == 'true' }}
        run: yarn

      - name: Build Bundle
        if: ${{ needs.setup.outputs.deploy_env != 'prod' || steps.check_tag.outputs.should_deploy == 'true' }}
        env:
          VITE_TYPEFORM_ID: ${{ vars.VITE_TYPEFORM_ID }}
          VITE_SENTRY_DSN: ${{ vars.VITE_SENTRY_DSN }}
          VITE_SENTRY_ORG: ${{ vars.VITE_SENTRY_ORG }}
          VITE_SENTRY_PROJECT: ${{ vars.VITE_SENTRY_PROJECT }}
          VITE_SENTRY_AUTH_TOKEN: ${{ secrets.VITE_SENTRY_AUTH_TOKEN }}
          VITE_ENV: ${{ needs.setup.outputs.deploy_env }}
          VITE_COMMIT_HASH: ${{ github.sha }}
          VITE_GTM_ID: ${{ vars.VITE_GTM_ID }}
        run: yarn build

      - name: Configure AWS Credentials
        if: ${{ needs.setup.outputs.deploy_env != 'prod' || steps.check_tag.outputs.should_deploy == 'true' }}
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ vars.AWS_OIDC_ROLE }}
          role-session-name: GitHub_to_AWS_via_FederatedOIDC

      - name: Deliver Files
        if: ${{ needs.setup.outputs.deploy_env != 'prod' || steps.check_tag.outputs.should_deploy == 'true' }}
        env:
          S3_BUCKET_NAME: ${{ vars.S3_BUCKET_NAME }}
        run: |
          aws s3 cp --recursive dist/ s3://$S3_BUCKET_NAME/

      - name: Invalidate CloudFront
        if: ${{ needs.setup.outputs.deploy_env != 'prod' || steps.check_tag.outputs.should_deploy == 'true' }}
        env:
          CLOUDFRONT_DISTRIBUTION_ID: ${{ vars.CLOUDFRONT_DISTRIBUTION_ID }}
        run: |
          aws cloudfront create-invalidation \
            --distribution-id $CLOUDFRONT_DISTRIBUTION_ID \
            --paths "/index.html"
